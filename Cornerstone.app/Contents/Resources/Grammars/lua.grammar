{
	id                        : 'lua';
	title                     : 'Lua';
	match:
	[ 
		extension								: 'lua',
	];

	rules: 
	[
		whitespace-rule:
		{
		},
		
		# Multi-line comment partition which includes SCM keywords
		
		regex-rule:
		{
			id                    : 'comment.multiline.lua';
			pattern               : @'--\[(?<level>=*)\[.*?]\k<level>]';
			multiline             : yes;

			rules:
			[
				whitespace-rule:
				{
				},
				
				regex-rule:
				{
					id                : 'comment.keyword.scm.lua';
					case-insensitive  : no;
					pattern           : @'\$(?<name>\w+)\:(?<value>.*)\s\$';
					groups:
					{
						name            : 'comment.keyword.scm.name.lua';
						value           : 'comment.keyword.scm.value.lua';
					};
				},
				
				default-rule:
				{
				},
			];
		},
		
		# End-of-line rule for shebang statements
		
		eol-rule:
		{
			id										: 'keyword.preprocessor.lua.shebang';
			open-sequence					: '#!';
		},
		
		# End-of-line comment partition which includes SCM keywords
		
		eol-rule:
		{
			id										: 'comment.singleline.lua';
			open-sequence					:	@'--';

			rules:
			[
				whitespace-rule:
				{
				},
			
				ref									: 'comment.keyword.scm.lua',

				default-rule:
				{
				},
			];
		},

		# Lua keywords

		word-rule:
		{
			id                    : 'keyword.lua';
			case-insensitive      : no;
			words:                [ 
															'and', 'break', 'do', 'else', 'elseif', 'end', 'false', 'for', 'function', 'if', 'in',
															'local', 'nil', 'not', 'or', 'repeat', 'return', 'then', 'true', 'until', 'while',
														];
		},
		
		# Text literal rules for strings and characters
		
		text-literal-rule:
		{
			id                    : 'literal.string.lua';
			open-sequence         : @'"';
			close-sequence        : @'"';
			escape-char           : @'\';
			multiline							: no;
			quoted-tokens         : yes;
		},
		
		text-literal-rule:
		{
			id                    : 'literal.string.lua.singlequotes';
			open-sequence         : '\'';
			close-sequence        : '\'';
			escape-char           : @'\';
			multi-line            : no;
			quoted-tokens         : yes;
		},
		
		regex-rule:
		{
			id                    : 'literal.string.lua.multiline';
			pattern               : @'\[(?<level>=*)\[.*?]\k<level>]';
			multiline             : yes;
		},

		# Rule for integral and non-integral numeric literals
		
		regex-rule:
		{
			id                    : 'literal.number.lua';
			case-insensitive      : no;
			pattern               : @'((0x[\da-fA-F]+[lL]?)|((\d+)?\.(\d+)([eE]\d+)?[fF]?)|(\d+\.?(\d+([eE]\d+)?)?[fF]?))(?=\s|$|\W)';
		},
		
		default-rule:
		{
		}
	];
};
