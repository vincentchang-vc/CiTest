{
	id                        : 'ecmascript';
	title                     : 'ECMAScript/JavaScript';
	match:
	[ 
		extension								: 'js',
	];

	rules: 
	[
		whitespace-rule:
		{
		},
		
		# Comment partitions which includes SCM keywords
		
		multiline-rule:
		{
			id										: 'comment.multiline.js';
			open-sequence					:	@'/*';
			close-sequence				: @'*/';
			capture-unclosed			: yes;

			rules:
			[
				whitespace-rule:
				{
				},
			
				regex-rule:
				{
					id                : 'comment.keyword.scm.js';
					case-insensitive  : no;
					pattern           : @'\$(?<name>\w+)\:(?<value>.*)\s\$';
					groups:
					{
						name            : 'comment.keyword.scm.name.js';
						value           : 'comment.keyword.scm.value.js';
					};
				},

				default-rule:
				{
				},
			];
		},

		eol-rule:
		{
			id										: 'comment.singleline.js';
			open-sequence					:	@'//';

			rules:
			[
				whitespace-rule:
				{
				},
			
				ref									: 'comment.keyword.scm.js',

				default-rule:
				{
				},
			];
		},

		# JavaScript keywords

		word-rule:
		{
			id                    : 'keyword.js';
			case-insensitive      : no;
			words:                [ 
															'break',
															'case', 'catch', 'continue', 
															'default', 'delete', 'do',
															'else',
															'finally', 'for', 'function',
															'if', 'in', 'instanceof',
															'new', 
															'return',
															'switch',
															'this', 'throw', 'try', 'typeof',
															'var', 'void',
															'while', 'with',
														];
		},
				
		word-rule:
		{
			id                    : 'keyword.js.reserved';
			case-insensitive      : no;
			words:                [ 
															'abstract', 
															'boolean', 'byte', 
															'char', 'class', 'const',
															'debugger', 'double',
															'enum', 'export', 'extends',
															'final', 'float',
															'goto',
															'implements', 'import', 'int', 'interface', 
															'long',
															'native',
															'package', 'private', 'protected', 'public',
															'short', 'static', 'super', 'synchronized', 
															'throws', 'transient', 
															'volatile',
														];
		},

		# Symbol rules for built-in symbols

		word-rule:
		{
			id                    : 'symbol.js';
			case-insensitive      : no;
			words:                [ 
															'null', 'true', 'false',
														];
		},
		
		# Text literal rules for strings and characters
		
		text-literal-rule:
		{
			id                    : 'literal.string.js.double-quote';
			open-sequence         : @'"';
			close-sequence        : @'"';
			escape-char           : @'\';
			multiline							: no;
			quoted-tokens         : yes;
		
			rules:
			[
				whitespace-rule:
				{
				},
				
				regex-rule:
				{
					id                : 'symbol.js.escaped.backslash';
					case-insensitive  : no;
					pattern           : @'\\\\';
				},

				regex-rule:
				{
					id                : 'symbol.js.escaped.character';
					case-insensitive  : no;
					pattern           : @'\\\w';
				},

				default-rule:
				{
				},
			];
		},
		
		text-literal-rule:
		{
			id                    : 'literal.string.js.single-quote';
			open-sequence         : '\'';
			close-sequence        : '\'';
			escape-char           : @'\';
			multi-line            : no;
			quoted-tokens         : yes;

			rules:
			[
				whitespace-rule:
				{
				},
				
				ref									: 'symbol.js.escaped.backslash',
				ref	                : 'symbol.js.escaped.character',

				default-rule:
				{
				},
			];
		},

		# Rule for integral and non-integral numeric literals
		
		regex-rule:
		{
			id                    : 'literal.number.js';
			case-insensitive      : no;
			pattern               : @'((0x[\da-fA-F]+[lL]?)|((\d+)?\.(\d+)([eE]\d+)?[fF]?)|(\d+\.?(\d+([eE]\d+)?)?[fF]?))(?=\s|$|\W)';
		},
		
		# Regex rule for regular expression literals
		
		regex-rule:
		{
			id                    : 'default.string.regex.js';
			case-insensitive			: no;
			pattern								: @'[({=,\?:!|&]\s*(?<regex>/((\\.)|.)+?/[gim]{,3}(?=\s*[\.,);}]))';
			groups:
			{
				regex								: 'literal.string.regex.js';
			};
		},

		default-rule:
		{
		}
	];
};
