{
	id                        : 'java';
	title                     : 'Java';
	match:
	[ 
		uti											: 'com.sun.java-source',
	];

	rules: 
	[
		whitespace-rule:
		{
		},
		
		# Multi-line doc comment partition which includes SCM keywords
		
		multiline-rule:
		{
			id                		: 'comment.multiline.doc.java';
			open-sequence     		: @'/**';
			close-sequence    		: @'*/';
			capture-unclosed  		: yes;
			
			rules:
			[
				whitespace-rule:
				{
				},
				
				regex-rule:
				{
					id								: 'comment.keyword.property.java';
					case-insensitive	: no;
					pattern						: @'@\w+';
				},
				
				regex-rule:
				{
					id                : 'comment.keyword.scm.java.doc';
					case-insensitive  : no;
					pattern           : @'\$(?<name>\w+)\:(?<value>.*)\s\$';
					groups:
					{
						name            : 'comment.keyword.scm.name.java.doc';
						value           : 'comment.keyword.scm.value.java.doc';
					};
				},
				
				default-rule:
				{
				},
			];
		},

		# Multi-line comment partition which includes SCM keywords
		
		multiline-rule:
		{
			id                		: 'comment.multiline.java';
			open-sequence     		: @'/*';
			close-sequence    		: @'*/';
			capture-unclosed  		: yes;
			
			rules:
			[
				whitespace-rule:
				{
				},
				
				regex-rule:
				{
					id                : 'comment.keyword.scm.java';
					case-insensitive  : no;
					pattern           : @'\$(?<name>\w+)\:(?<value>.*)\s\$';
					groups:
					{
						name            : 'comment.keyword.scm.name.java';
						value           : 'comment.keyword.scm.value.java';
					};
				},
				
				default-rule:
				{
				},
			];
		},
		
		# End-of-line comment partition which includes SCM keywords
		
		eol-rule:
		{
			id										: 'comment.singleline.java';
			open-sequence					:	@'//';

			rules:
			[
				whitespace-rule:
				{
				},
			
				ref									: 'comment.keyword.scm.java',

				default-rule:
				{
				},
			];
		},

		# Java keywords

		word-rule:
		{
			id                    : 'keyword.java';
			case-insensitive      : no;
			words:                [ 
															'abstract', 'assert',
															'boolean', 'break', 'byte',
															'case', 'catch', 'char', 'class', 'const', 'continue',
															'default', 'do', 'double',
															'else', 'enum', 'extends',
															'false', 'final', 'finally', 'float', 'for',
															'goto',
															'if', 'implements', 'import', 'instanceof', 'int', 'interface',
															'long',
															'native', 'new', 'null',
															'package', 'private', 'protected', 'public',
															'return',
															'short', 'static', 'strictfp', 'super', 'switch', 'synchronized',
															'this', 'throw', 'throws', 'transient', 'true', 'try',
															'void', 'volatile',
															'while',
														];
		},
				
		# Text literal rules for strings and characters
		
		text-literal-rule:
		{
			id                    : 'literal.string.java';
			open-sequence         : @'"';
			close-sequence        : @'"';
			escape-char           : @'\';
			multiline							: no;
			quoted-tokens         : yes;
		},
		
		text-literal-rule:
		{
			id                    : 'literal.char.java';
			open-sequence         : '\'';
			close-sequence        : '\'';
			escape-char           : @'\';
			multi-line            : no;
			quoted-tokens         : yes;
		},
		
		# Rule for integral and non-integral numeric literals
		
		regex-rule:
		{
			id                    : 'literal.number.java';
			case-insensitive      : no;
			pattern               : @'((0x[\da-fA-F]+[lL]?)|((\d+)?\.(\d+)([eE]\d+)?[fF]?)|(\d+\.?(\d+([eE]\d+)?)?[fF]?))(?=\s|$|\W)';
		},
		
		default-rule:
		{
		}
	];
};
